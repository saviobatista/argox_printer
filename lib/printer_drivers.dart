// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int B_Bar2d_Maxi(
    int x,
    int y,
    int cl,
    int cc,
    int pc,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Bar2d_Maxi(
      x,
      y,
      cl,
      cc,
      pc,
      data,
    );
  }

  late final _B_Bar2d_MaxiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_Bar2d_Maxi');
  late final _B_Bar2d_Maxi = _B_Bar2d_MaxiPtr.asFunction<
      int Function(int, int, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Bar2d_PDF417(
    int x,
    int y,
    int w,
    int v,
    int s,
    int c,
    int px,
    int py,
    int r,
    int l,
    int t,
    int o,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Bar2d_PDF417(
      x,
      y,
      w,
      v,
      s,
      c,
      px,
      py,
      r,
      l,
      t,
      o,
      data,
    );
  }

  late final _B_Bar2d_PDF417Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('B_Bar2d_PDF417');
  late final _B_Bar2d_PDF417 = _B_Bar2d_PDF417Ptr.asFunction<
      int Function(int, int, int, int, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Int8>)>();

  int B_Bar2d_PDF417_N(
    int x,
    int y,
    int w,
    int h,
    ffi.Pointer<ffi.Int8> pParameter,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Bar2d_PDF417_N(
      x,
      y,
      w,
      h,
      pParameter,
      data,
    );
  }

  late final _B_Bar2d_PDF417_NPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Bar2d_PDF417_N');
  late final _B_Bar2d_PDF417_N = _B_Bar2d_PDF417_NPtr.asFunction<
      int Function(
          int, int, int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Bar2d_DataMatrix(
    int x,
    int y,
    int r,
    int l,
    int h,
    int v,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Bar2d_DataMatrix(
      x,
      y,
      r,
      l,
      h,
      v,
      data,
    );
  }

  late final _B_Bar2d_DataMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('B_Bar2d_DataMatrix');
  late final _B_Bar2d_DataMatrix = _B_Bar2d_DataMatrixPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Int8>)>();

  void B_ClosePrn() {
    return _B_ClosePrn();
  }

  late final _B_ClosePrnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('B_ClosePrn');
  late final _B_ClosePrn = _B_ClosePrnPtr.asFunction<void Function()>();

  int B_CreatePrn(
    int selection,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _B_CreatePrn(
      selection,
      filename,
    );
  }

  late final _B_CreatePrnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_CreatePrn');
  late final _B_CreatePrn =
      _B_CreatePrnPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int B_Del_Form(
    ffi.Pointer<ffi.Int8> formname,
  ) {
    return _B_Del_Form(
      formname,
    );
  }

  late final _B_Del_FormPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_Del_Form');
  late final _B_Del_Form =
      _B_Del_FormPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_Del_Pcx(
    ffi.Pointer<ffi.Int8> pcxname,
  ) {
    return _B_Del_Pcx(
      pcxname,
    );
  }

  late final _B_Del_PcxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_Del_Pcx');
  late final _B_Del_Pcx =
      _B_Del_PcxPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_Draw_Box(
    int x,
    int y,
    int thickness,
    int hor_dots,
    int ver_dots,
  ) {
    return _B_Draw_Box(
      x,
      y,
      thickness,
      hor_dots,
      ver_dots,
    );
  }

  late final _B_Draw_BoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('B_Draw_Box');
  late final _B_Draw_Box =
      _B_Draw_BoxPtr.asFunction<int Function(int, int, int, int, int)>();

  int B_Draw_Line(
    int mode,
    int x,
    int y,
    int hor_dots,
    int ver_dots,
  ) {
    return _B_Draw_Line(
      mode,
      x,
      y,
      hor_dots,
      ver_dots,
    );
  }

  late final _B_Draw_LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int8, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('B_Draw_Line');
  late final _B_Draw_Line =
      _B_Draw_LinePtr.asFunction<int Function(int, int, int, int, int)>();

  int B_Error_Reporting(
    int option,
  ) {
    return _B_Error_Reporting(
      option,
    );
  }

  late final _B_Error_ReportingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>(
          'B_Error_Reporting');
  late final _B_Error_Reporting =
      _B_Error_ReportingPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> B_Get_DLL_Version(
    int nShowMessage,
  ) {
    return _B_Get_DLL_Version(
      nShowMessage,
    );
  }

  late final _B_Get_DLL_VersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'B_Get_DLL_Version');
  late final _B_Get_DLL_Version =
      _B_Get_DLL_VersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int B_Get_DLL_VersionA(
    int nShowMessage,
  ) {
    return _B_Get_DLL_VersionA(
      nShowMessage,
    );
  }

  late final _B_Get_DLL_VersionAPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Get_DLL_VersionA');
  late final _B_Get_DLL_VersionA =
      _B_Get_DLL_VersionAPtr.asFunction<int Function(int)>();

  int B_Get_Graphic_ColorBMP(
    int x,
    int y,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _B_Get_Graphic_ColorBMP(
      x,
      y,
      filename,
    );
  }

  late final _B_Get_Graphic_ColorBMPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('B_Get_Graphic_ColorBMP');
  late final _B_Get_Graphic_ColorBMP = _B_Get_Graphic_ColorBMPPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Get_Graphic_ColorBMPEx(
    int x,
    int y,
    int nWidth,
    int nHeight,
    int rotate,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _B_Get_Graphic_ColorBMPEx(
      x,
      y,
      nWidth,
      nHeight,
      rotate,
      id_name,
      filename,
    );
  }

  late final _B_Get_Graphic_ColorBMPExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Get_Graphic_ColorBMPEx');
  late final _B_Get_Graphic_ColorBMPEx =
      _B_Get_Graphic_ColorBMPExPtr.asFunction<
          int Function(int, int, int, int, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int B_Get_Graphic_ColorBMP_HBitmap(
    int x,
    int y,
    int nWidth,
    int nHeight,
    int rotate,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> hbm,
  ) {
    return _B_Get_Graphic_ColorBMP_HBitmap(
      x,
      y,
      nWidth,
      nHeight,
      rotate,
      id_name,
      hbm,
    );
  }

  late final _B_Get_Graphic_ColorBMP_HBitmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Get_Graphic_ColorBMP_HBitmap');
  late final _B_Get_Graphic_ColorBMP_HBitmap =
      _B_Get_Graphic_ColorBMP_HBitmapPtr.asFunction<
          int Function(int, int, int, int, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int B_Get_Pcx(
    int x,
    int y,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _B_Get_Pcx(
      x,
      y,
      filename,
    );
  }

  late final _B_Get_PcxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_Get_Pcx');
  late final _B_Get_Pcx =
      _B_Get_PcxPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Initial_Setting(
    int Type,
    ffi.Pointer<ffi.Int8> Source,
  ) {
    return _B_Initial_Setting(
      Type,
      Source,
    );
  }

  late final _B_Initial_SettingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_Initial_Setting');
  late final _B_Initial_Setting = _B_Initial_SettingPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>)>();

  int B_WriteData(
    int IsImmediate,
    ffi.Pointer<ffi.Int8> pbuf,
    int length,
  ) {
    return _B_WriteData(
      IsImmediate,
      pbuf,
      length,
    );
  }

  late final _B_WriteDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('B_WriteData');
  late final _B_WriteData = _B_WriteDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int B_ReadData(
    ffi.Pointer<ffi.Int8> pbuf,
    int length,
    int dwTimeoutms,
  ) {
    return _B_ReadData(
      pbuf,
      length,
      dwTimeoutms,
    );
  }

  late final _B_ReadDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>>('B_ReadData');
  late final _B_ReadData = _B_ReadDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int B_Load_Pcx(
    int x,
    int y,
    ffi.Pointer<ffi.Int8> pcxname,
  ) {
    return _B_Load_Pcx(
      x,
      y,
      pcxname,
    );
  }

  late final _B_Load_PcxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_Load_Pcx');
  late final _B_Load_Pcx = _B_Load_PcxPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Open_ChineseFont(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _B_Open_ChineseFont(
      path,
    );
  }

  late final _B_Open_ChineseFontPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_Open_ChineseFont');
  late final _B_Open_ChineseFont =
      _B_Open_ChineseFontPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_Print_Form(
    int labset,
    int copies,
    ffi.Pointer<ffi.Int8> form_out,
    ffi.Pointer<ffi.Int8> var1,
  ) {
    return _B_Print_Form(
      labset,
      copies,
      form_out,
      var1,
    );
  }

  late final _B_Print_FormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Print_Form');
  late final _B_Print_Form = _B_Print_FormPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Print_MCopy(
    int labset,
    int copies,
  ) {
    return _B_Print_MCopy(
      labset,
      copies,
    );
  }

  late final _B_Print_MCopyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'B_Print_MCopy');
  late final _B_Print_MCopy =
      _B_Print_MCopyPtr.asFunction<int Function(int, int)>();

  int B_Print_Out(
    int labset,
  ) {
    return _B_Print_Out(
      labset,
    );
  }

  late final _B_Print_OutPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('B_Print_Out');
  late final _B_Print_Out = _B_Print_OutPtr.asFunction<int Function(int)>();

  int B_Prn_Barcode(
    int x,
    int y,
    int ori,
    ffi.Pointer<ffi.Int8> type,
    int narrow,
    int width,
    int height,
    int human,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Prn_Barcode(
      x,
      y,
      ori,
      type,
      narrow,
      width,
      height,
      human,
      data,
    );
  }

  late final _B_Prn_BarcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Pointer<ffi.Int8>)>>('B_Prn_Barcode');
  late final _B_Prn_Barcode = _B_Prn_BarcodePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
          ffi.Pointer<ffi.Int8>)>();

  void B_Prn_Configuration() {
    return _B_Prn_Configuration();
  }

  late final _B_Prn_ConfigurationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('B_Prn_Configuration');
  late final _B_Prn_Configuration =
      _B_Prn_ConfigurationPtr.asFunction<void Function()>();

  int B_Prn_Text(
    int x,
    int y,
    int ori,
    int font,
    int hor_factor,
    int ver_factor,
    int mode,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Prn_Text(
      x,
      y,
      ori,
      font,
      hor_factor,
      ver_factor,
      mode,
      data,
    );
  }

  late final _B_Prn_TextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Pointer<ffi.Int8>)>>('B_Prn_Text');
  late final _B_Prn_Text = _B_Prn_TextPtr.asFunction<
      int Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Prn_Text_Chinese(
    int x,
    int y,
    int fonttype,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Prn_Text_Chinese(
      x,
      y,
      fonttype,
      id_name,
      data,
    );
  }

  late final _B_Prn_Text_ChinesePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Prn_Text_Chinese');
  late final _B_Prn_Text_Chinese = _B_Prn_Text_ChinesePtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Prn_Text_TrueType(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Prn_Text_TrueType(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
    );
  }

  late final _B_Prn_Text_TrueTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Prn_Text_TrueType');
  late final _B_Prn_Text_TrueType = _B_Prn_Text_TrueTypePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
          int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Prn_Text_TrueType_W(
    int x,
    int y,
    int FHeight,
    int FWidth,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Prn_Text_TrueType_W(
      x,
      y,
      FHeight,
      FWidth,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
    );
  }

  late final _B_Prn_Text_TrueType_WPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('B_Prn_Text_TrueType_W');
  late final _B_Prn_Text_TrueType_W = _B_Prn_Text_TrueType_WPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Int8>, int, int, int,
          int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Select_Option(
    int object,
  ) {
    return _B_Select_Option(
      object,
    );
  }

  late final _B_Select_OptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Select_Option');
  late final _B_Select_Option =
      _B_Select_OptionPtr.asFunction<int Function(int)>();

  int B_Select_Option2(
    int object,
    int p,
  ) {
    return _B_Select_Option2(
      object,
      p,
    );
  }

  late final _B_Select_Option2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'B_Select_Option2');
  late final _B_Select_Option2 =
      _B_Select_Option2Ptr.asFunction<int Function(int, int)>();

  int B_Select_Symbol(
    int num_bit,
    int symbol,
    int country,
  ) {
    return _B_Select_Symbol(
      num_bit,
      symbol,
      country,
    );
  }

  late final _B_Select_SymbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('B_Select_Symbol');
  late final _B_Select_Symbol =
      _B_Select_SymbolPtr.asFunction<int Function(int, int, int)>();

  int B_Select_Symbol2(
    int num_bit,
    ffi.Pointer<ffi.Int8> symbol,
    int country,
  ) {
    return _B_Select_Symbol2(
      num_bit,
      symbol,
      country,
    );
  }

  late final _B_Select_Symbol2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('B_Select_Symbol2');
  late final _B_Select_Symbol2 = _B_Select_Symbol2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int B_Set_Backfeed(
    int option,
  ) {
    return _B_Set_Backfeed(
      option,
    );
  }

  late final _B_Set_BackfeedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>(
          'B_Set_Backfeed');
  late final _B_Set_Backfeed =
      _B_Set_BackfeedPtr.asFunction<int Function(int)>();

  int B_Set_Backfeed_Offset(
    int offset,
  ) {
    return _B_Set_Backfeed_Offset(
      offset,
    );
  }

  late final _B_Set_Backfeed_OffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_Backfeed_Offset');
  late final _B_Set_Backfeed_Offset =
      _B_Set_Backfeed_OffsetPtr.asFunction<int Function(int)>();

  int B_Set_CutPeel_Offset(
    int offset,
  ) {
    return _B_Set_CutPeel_Offset(
      offset,
    );
  }

  late final _B_Set_CutPeel_OffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_CutPeel_Offset');
  late final _B_Set_CutPeel_Offset =
      _B_Set_CutPeel_OffsetPtr.asFunction<int Function(int)>();

  int B_Set_BMPSave(
    int nSave,
    ffi.Pointer<ffi.Int8> pstrBMPFName,
  ) {
    return _B_Set_BMPSave(
      nSave,
      pstrBMPFName,
    );
  }

  late final _B_Set_BMPSavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_Set_BMPSave');
  late final _B_Set_BMPSave =
      _B_Set_BMPSavePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int B_Set_Darkness(
    int darkness,
  ) {
    return _B_Set_Darkness(
      darkness,
    );
  }

  late final _B_Set_DarknessPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_Darkness');
  late final _B_Set_Darkness =
      _B_Set_DarknessPtr.asFunction<int Function(int)>();

  int B_Set_DebugDialog(
    int nEnable,
  ) {
    return _B_Set_DebugDialog(
      nEnable,
    );
  }

  late final _B_Set_DebugDialogPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_DebugDialog');
  late final _B_Set_DebugDialog =
      _B_Set_DebugDialogPtr.asFunction<int Function(int)>();

  int B_Set_Direction(
    int direction,
  ) {
    return _B_Set_Direction(
      direction,
    );
  }

  late final _B_Set_DirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>(
          'B_Set_Direction');
  late final _B_Set_Direction =
      _B_Set_DirectionPtr.asFunction<int Function(int)>();

  int B_Set_Form(
    ffi.Pointer<ffi.Int8> formfile,
  ) {
    return _B_Set_Form(
      formfile,
    );
  }

  late final _B_Set_FormPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_Set_Form');
  late final _B_Set_Form =
      _B_Set_FormPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_Set_Labgap(
    int lablength,
    int gaplength,
  ) {
    return _B_Set_Labgap(
      lablength,
      gaplength,
    );
  }

  late final _B_Set_LabgapPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'B_Set_Labgap');
  late final _B_Set_Labgap =
      _B_Set_LabgapPtr.asFunction<int Function(int, int)>();

  int B_Set_Labwidth(
    int labwidth,
  ) {
    return _B_Set_Labwidth(
      labwidth,
    );
  }

  late final _B_Set_LabwidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_Labwidth');
  late final _B_Set_Labwidth =
      _B_Set_LabwidthPtr.asFunction<int Function(int)>();

  int B_Set_Originpoint(
    int hor,
    int ver,
  ) {
    return _B_Set_Originpoint(
      hor,
      ver,
    );
  }

  late final _B_Set_OriginpointPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'B_Set_Originpoint');
  late final _B_Set_Originpoint =
      _B_Set_OriginpointPtr.asFunction<int Function(int, int)>();

  int B_Set_Prncomport(
    int baud,
    int parity,
    int data,
    int stop,
  ) {
    return _B_Set_Prncomport(
      baud,
      parity,
      data,
      stop,
    );
  }

  late final _B_Set_PrncomportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int8, ffi.Int32, ffi.Int32)>>('B_Set_Prncomport');
  late final _B_Set_Prncomport =
      _B_Set_PrncomportPtr.asFunction<int Function(int, int, int, int)>();

  int B_Set_Prncomport_PC(
    int nBaudRate,
    int nByteSize,
    int nParity,
    int nStopBits,
    int nDsr,
    int nCts,
    int nXonXoff,
  ) {
    return _B_Set_Prncomport_PC(
      nBaudRate,
      nByteSize,
      nParity,
      nStopBits,
      nDsr,
      nCts,
      nXonXoff,
    );
  }

  late final _B_Set_Prncomport_PCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('B_Set_Prncomport_PC');
  late final _B_Set_Prncomport_PC = _B_Set_Prncomport_PCPtr.asFunction<
      int Function(int, int, int, int, int, int, int)>();

  int B_Set_Speed(
    int speed,
  ) {
    return _B_Set_Speed(
      speed,
    );
  }

  late final _B_Set_SpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('B_Set_Speed');
  late final _B_Set_Speed = _B_Set_SpeedPtr.asFunction<int Function(int)>();

  int B_Set_ProcessDlg(
    int nShow,
  ) {
    return _B_Set_ProcessDlg(
      nShow,
    );
  }

  late final _B_Set_ProcessDlgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_ProcessDlg');
  late final _B_Set_ProcessDlg =
      _B_Set_ProcessDlgPtr.asFunction<int Function(int)>();

  int B_Set_ErrorDlg(
    int nShow,
  ) {
    return _B_Set_ErrorDlg(
      nShow,
    );
  }

  late final _B_Set_ErrorDlgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_Set_ErrorDlg');
  late final _B_Set_ErrorDlg =
      _B_Set_ErrorDlgPtr.asFunction<int Function(int)>();

  int B_GetUSBBufferLen() {
    return _B_GetUSBBufferLen();
  }

  late final _B_GetUSBBufferLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('B_GetUSBBufferLen');
  late final _B_GetUSBBufferLen =
      _B_GetUSBBufferLenPtr.asFunction<int Function()>();

  int B_EnumUSB(
    ffi.Pointer<ffi.Int8> buf,
  ) {
    return _B_EnumUSB(
      buf,
    );
  }

  late final _B_EnumUSBPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_EnumUSB');
  late final _B_EnumUSB =
      _B_EnumUSBPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_CreateUSBPort(
    int nPort,
  ) {
    return _B_CreateUSBPort(
      nPort,
    );
  }

  late final _B_CreateUSBPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_CreateUSBPort');
  late final _B_CreateUSBPort =
      _B_CreateUSBPortPtr.asFunction<int Function(int)>();

  int B_ResetPrinter() {
    return _B_ResetPrinter();
  }

  late final _B_ResetPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('B_ResetPrinter');
  late final _B_ResetPrinter = _B_ResetPrinterPtr.asFunction<int Function()>();

  int B_GetPrinterResponse(
    ffi.Pointer<ffi.Int8> buf,
    int nMax,
  ) {
    return _B_GetPrinterResponse(
      buf,
      nMax,
    );
  }

  late final _B_GetPrinterResponsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('B_GetPrinterResponse');
  late final _B_GetPrinterResponse = _B_GetPrinterResponsePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int)>();

  int B_TFeedMode(
    int nMode,
  ) {
    return _B_TFeedMode(
      nMode,
    );
  }

  late final _B_TFeedModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('B_TFeedMode');
  late final _B_TFeedMode = _B_TFeedModePtr.asFunction<int Function(int)>();

  int B_TFeedTest() {
    return _B_TFeedTest();
  }

  late final _B_TFeedTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('B_TFeedTest');
  late final _B_TFeedTest = _B_TFeedTestPtr.asFunction<int Function()>();

  int B_CreatePort(
    int nPortType,
    int nPort,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _B_CreatePort(
      nPortType,
      nPort,
      filename,
    );
  }

  late final _B_CreatePortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('B_CreatePort');
  late final _B_CreatePort = _B_CreatePortPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int B_Execute_Form(
    ffi.Pointer<ffi.Int8> form_out,
    ffi.Pointer<ffi.Int8> var1,
  ) {
    return _B_Execute_Form(
      form_out,
      var1,
    );
  }

  late final _B_Execute_FormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('B_Execute_Form');
  late final _B_Execute_Form = _B_Execute_FormPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int B_Bar2d_QR(
    int x,
    int y,
    int model,
    int scl,
    int error,
    int dinput,
    int c,
    int d,
    int p,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _B_Bar2d_QR(
      x,
      y,
      model,
      scl,
      error,
      dinput,
      c,
      d,
      p,
      data,
    );
  }

  late final _B_Bar2d_QRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Int8,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('B_Bar2d_QR');
  late final _B_Bar2d_QR = _B_Bar2d_QRPtr.asFunction<
      int Function(int, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Int8>)>();

  int B_GetNetPrinterBufferLen() {
    return _B_GetNetPrinterBufferLen();
  }

  late final _B_GetNetPrinterBufferLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'B_GetNetPrinterBufferLen');
  late final _B_GetNetPrinterBufferLen =
      _B_GetNetPrinterBufferLenPtr.asFunction<int Function()>();

  int B_EnumNetPrinter(
    ffi.Pointer<ffi.Int8> buf,
  ) {
    return _B_EnumNetPrinter(
      buf,
    );
  }

  late final _B_EnumNetPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_EnumNetPrinter');
  late final _B_EnumNetPrinter =
      _B_EnumNetPrinterPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_CreateNetPort(
    int nPort,
  ) {
    return _B_CreateNetPort(
      nPort,
    );
  }

  late final _B_CreateNetPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'B_CreateNetPort');
  late final _B_CreateNetPort =
      _B_CreateNetPortPtr.asFunction<int Function(int)>();

  int B_Prn_Text_TrueType_Uni(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int format,
  ) {
    return _B_Prn_Text_TrueType_Uni(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      format,
    );
  }

  late final _B_Prn_Text_TrueType_UniPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('B_Prn_Text_TrueType_Uni');
  late final _B_Prn_Text_TrueType_Uni = _B_Prn_Text_TrueType_UniPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
          int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int B_Prn_Text_TrueType_UniB(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int format,
  ) {
    return _B_Prn_Text_TrueType_UniB(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      format,
    );
  }

  late final _B_Prn_Text_TrueType_UniBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('B_Prn_Text_TrueType_UniB');
  late final _B_Prn_Text_TrueType_UniB =
      _B_Prn_Text_TrueType_UniBPtr.asFunction<
          int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
              int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int B_GetUSBDeviceInfo(
    int nPort,
    ffi.Pointer<ffi.Int8> pDeviceName,
    ffi.Pointer<ffi.Int32> pDeviceNameLen,
    ffi.Pointer<ffi.Int8> pDevicePath,
    ffi.Pointer<ffi.Int32> pDevicePathLen,
  ) {
    return _B_GetUSBDeviceInfo(
      nPort,
      pDeviceName,
      pDeviceNameLen,
      pDevicePath,
      pDevicePathLen,
    );
  }

  late final _B_GetUSBDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('B_GetUSBDeviceInfo');
  late final _B_GetUSBDeviceInfo = _B_GetUSBDeviceInfoPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>)>();

  int B_Set_EncryptionKey(
    ffi.Pointer<ffi.Int8> encryptionKey,
  ) {
    return _B_Set_EncryptionKey(
      encryptionKey,
    );
  }

  late final _B_Set_EncryptionKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'B_Set_EncryptionKey');
  late final _B_Set_EncryptionKey =
      _B_Set_EncryptionKeyPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int B_Check_EncryptionKey(
    ffi.Pointer<ffi.Int8> decodeKey,
    ffi.Pointer<ffi.Int8> encryptionKey,
    int dwTimeoutms,
  ) {
    return _B_Check_EncryptionKey(
      decodeKey,
      encryptionKey,
      dwTimeoutms,
    );
  }

  late final _B_Check_EncryptionKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('B_Check_EncryptionKey');
  late final _B_Check_EncryptionKey = _B_Check_EncryptionKeyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void B_Set_CommTimeout(
    int ReadTotalTimeoutConstant,
    int WriteTotalTimeoutConstant,
  ) {
    return _B_Set_CommTimeout(
      ReadTotalTimeoutConstant,
      WriteTotalTimeoutConstant,
    );
  }

  late final _B_Set_CommTimeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'B_Set_CommTimeout');
  late final _B_Set_CommTimeout =
      _B_Set_CommTimeoutPtr.asFunction<void Function(int, int)>();

  void B_Get_CommTimeout(
    ffi.Pointer<ffi.Int32> ReadTotalTimeoutConstant,
    ffi.Pointer<ffi.Int32> WriteTotalTimeoutConstant,
  ) {
    return _B_Get_CommTimeout(
      ReadTotalTimeoutConstant,
      WriteTotalTimeoutConstant,
    );
  }

  late final _B_Get_CommTimeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('B_Get_CommTimeout');
  late final _B_Get_CommTimeout = _B_Get_CommTimeoutPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void B_Set_LabelForSmartPrint(
    int lablength,
    int gaplength,
  ) {
    return _B_Set_LabelForSmartPrint(
      lablength,
      gaplength,
    );
  }

  late final _B_Set_LabelForSmartPrintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'B_Set_LabelForSmartPrint');
  late final _B_Set_LabelForSmartPrint =
      _B_Set_LabelForSmartPrintPtr.asFunction<void Function(int, int)>();

  int Z_Bar2d_Maxi(
    int x,
    int y,
    int nMode,
    int nSymbol,
    int nTotal,
    int nClass,
    int nCountry,
    ffi.Pointer<ffi.Int8> cZipCode1,
    ffi.Pointer<ffi.Int8> cZipCode2,
    ffi.Pointer<ffi.Int8> data,
    int increase,
  ) {
    return _Z_Bar2d_Maxi(
      x,
      y,
      nMode,
      nSymbol,
      nTotal,
      nClass,
      nCountry,
      cZipCode1,
      cZipCode2,
      data,
      increase,
    );
  }

  late final _Z_Bar2d_MaxiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Bar2d_Maxi');
  late final _Z_Bar2d_Maxi = _Z_Bar2d_MaxiPtr.asFunction<
      int Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int Z_Bar2d_PDF417(
    int x,
    int y,
    int o,
    int h,
    int s,
    int c,
    int r,
    int t,
    int narrow,
    ffi.Pointer<ffi.Int8> data,
    int increase,
  ) {
    return _Z_Bar2d_PDF417(
      x,
      y,
      o,
      h,
      s,
      c,
      r,
      t,
      narrow,
      data,
      increase,
    );
  }

  late final _Z_Bar2d_PDF417Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Bar2d_PDF417');
  late final _Z_Bar2d_PDF417 = _Z_Bar2d_PDF417Ptr.asFunction<
      int Function(int, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Int8>, int)>();

  int Z_Bar2d_DataMatrix(
    int x,
    int y,
    int o,
    int h,
    int c,
    int r,
    ffi.Pointer<ffi.Int8> data,
    int increase,
  ) {
    return _Z_Bar2d_DataMatrix(
      x,
      y,
      o,
      h,
      c,
      r,
      data,
      increase,
    );
  }

  late final _Z_Bar2d_DataMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Bar2d_DataMatrix');
  late final _Z_Bar2d_DataMatrix = _Z_Bar2d_DataMatrixPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Int8>, int)>();

  void Z_ClosePrn() {
    return _Z_ClosePrn();
  }

  late final _Z_ClosePrnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Z_ClosePrn');
  late final _Z_ClosePrn = _Z_ClosePrnPtr.asFunction<void Function()>();

  int Z_CreatePrn(
    int selection,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _Z_CreatePrn(
      selection,
      filename,
    );
  }

  late final _Z_CreatePrnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('Z_CreatePrn');
  late final _Z_CreatePrn =
      _Z_CreatePrnPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int Z_Set_FlashMemory(
    int Status,
  ) {
    return _Z_Set_FlashMemory(
      Status,
    );
  }

  late final _Z_Set_FlashMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_FlashMemory');
  late final _Z_Set_FlashMemory =
      _Z_Set_FlashMemoryPtr.asFunction<int Function(int)>();

  void Z_Set_Format_New(
    ffi.Pointer<ffi.Int8> FormatName,
  ) {
    return _Z_Set_Format_New(
      FormatName,
    );
  }

  late final _Z_Set_Format_NewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'Z_Set_Format_New');
  late final _Z_Set_Format_New =
      _Z_Set_Format_NewPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int Z_Del_Format(
    int memory,
    ffi.Pointer<ffi.Int8> formatname,
  ) {
    return _Z_Del_Format(
      memory,
      formatname,
    );
  }

  late final _Z_Del_FormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('Z_Del_Format');
  late final _Z_Del_Format =
      _Z_Del_FormatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int Z_Del_Graphic(
    int memory,
    ffi.Pointer<ffi.Int8> graphicname,
  ) {
    return _Z_Del_Graphic(
      memory,
      graphicname,
    );
  }

  late final _Z_Del_GraphicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('Z_Del_Graphic');
  late final _Z_Del_Graphic =
      _Z_Del_GraphicPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int Z_Draw_Box(
    int x,
    int y,
    int width,
    int height,
    int thickness,
  ) {
    return _Z_Draw_Box(
      x,
      y,
      width,
      height,
      thickness,
    );
  }

  late final _Z_Draw_BoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('Z_Draw_Box');
  late final _Z_Draw_Box =
      _Z_Draw_BoxPtr.asFunction<int Function(int, int, int, int, int)>();

  int Z_Draw_Line(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _Z_Draw_Line(
      x,
      y,
      width,
      height,
    );
  }

  late final _Z_Draw_LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>('Z_Draw_Line');
  late final _Z_Draw_Line =
      _Z_Draw_LinePtr.asFunction<int Function(int, int, int, int)>();

  ffi.Pointer<ffi.Int8> Z_Get_DLL_Version(
    int nShowMessage,
  ) {
    return _Z_Get_DLL_Version(
      nShowMessage,
    );
  }

  late final _Z_Get_DLL_VersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'Z_Get_DLL_Version');
  late final _Z_Get_DLL_Version =
      _Z_Get_DLL_VersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int Z_Get_DLL_VersionA(
    int nShowMessage,
  ) {
    return _Z_Get_DLL_VersionA(
      nShowMessage,
    );
  }

  late final _Z_Get_DLL_VersionAPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Get_DLL_VersionA');
  late final _Z_Get_DLL_VersionA =
      _Z_Get_DLL_VersionAPtr.asFunction<int Function(int)>();

  int Z_Get_Graphic_ColorBMP(
    int x,
    int y,
    int mem_mode,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _Z_Get_Graphic_ColorBMP(
      x,
      y,
      mem_mode,
      filename,
    );
  }

  late final _Z_Get_Graphic_ColorBMPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('Z_Get_Graphic_ColorBMP');
  late final _Z_Get_Graphic_ColorBMP = _Z_Get_Graphic_ColorBMPPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>)>();

  int Z_Get_Graphic_ColorBMPEx(
    int x,
    int y,
    int nWidth,
    int nHeight,
    int rotate,
    int mem_mode,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _Z_Get_Graphic_ColorBMPEx(
      x,
      y,
      nWidth,
      nHeight,
      rotate,
      mem_mode,
      id_name,
      filename,
    );
  }

  late final _Z_Get_Graphic_ColorBMPExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('Z_Get_Graphic_ColorBMPEx');
  late final _Z_Get_Graphic_ColorBMPEx =
      _Z_Get_Graphic_ColorBMPExPtr.asFunction<
          int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int Z_Get_Graphic_ColorBMP_HBitmap(
    int x,
    int y,
    int nWidth,
    int nHeight,
    int rotate,
    int mem_mode,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> hbm,
  ) {
    return _Z_Get_Graphic_ColorBMP_HBitmap(
      x,
      y,
      nWidth,
      nHeight,
      rotate,
      mem_mode,
      id_name,
      hbm,
    );
  }

  late final _Z_Get_Graphic_ColorBMP_HBitmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('Z_Get_Graphic_ColorBMP_HBitmap');
  late final _Z_Get_Graphic_ColorBMP_HBitmap =
      _Z_Get_Graphic_ColorBMP_HBitmapPtr.asFunction<
          int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int Z_Initial_Setting(
    int Type,
    ffi.Pointer<ffi.Int8> Source,
  ) {
    return _Z_Initial_Setting(
      Type,
      Source,
    );
  }

  late final _Z_Initial_SettingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('Z_Initial_Setting');
  late final _Z_Initial_Setting = _Z_Initial_SettingPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>)>();

  int Z_WriteData(
    int IsImmediate,
    ffi.Pointer<ffi.Int8> pbuf,
    int len,
  ) {
    return _Z_WriteData(
      IsImmediate,
      pbuf,
      len,
    );
  }

  late final _Z_WriteDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('Z_WriteData');
  late final _Z_WriteData = _Z_WriteDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int Z_ReadData(
    ffi.Pointer<ffi.Int8> pbuf,
    int length,
    int dwTimeoutms,
  ) {
    return _Z_ReadData(
      pbuf,
      length,
      dwTimeoutms,
    );
  }

  late final _Z_ReadDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>>('Z_ReadData');
  late final _Z_ReadData = _Z_ReadDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int Z_Load_Graphic(
    int x,
    int y,
    int memory,
    ffi.Pointer<ffi.Int8> graphic_name,
    int horizontal,
    int vertical,
  ) {
    return _Z_Load_Graphic(
      x,
      y,
      memory,
      graphic_name,
      horizontal,
      vertical,
    );
  }

  late final _Z_Load_GraphicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>>('Z_Load_Graphic');
  late final _Z_Load_Graphic = _Z_Load_GraphicPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int)>();

  int Z_Open_ChineseFont(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _Z_Open_ChineseFont(
      path,
    );
  }

  late final _Z_Open_ChineseFontPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'Z_Open_ChineseFont');
  late final _Z_Open_ChineseFont =
      _Z_Open_ChineseFontPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int Z_Print_Form(
    int copies,
    int labset,
    int mem_mode,
    ffi.Pointer<ffi.Int8> form_out,
  ) {
    return _Z_Print_Form(
      copies,
      labset,
      mem_mode,
      form_out,
    );
  }

  late final _Z_Print_FormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('Z_Print_Form');
  late final _Z_Print_Form = _Z_Print_FormPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>)>();

  int Z_Print_Out(
    int sets,
    int copies,
  ) {
    return _Z_Print_Out(
      sets,
      copies,
    );
  }

  late final _Z_Print_OutPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Z_Print_Out');
  late final _Z_Print_Out =
      _Z_Print_OutPtr.asFunction<int Function(int, int)>();

  int Z_Prn_Barcode(
    int x,
    int y,
    int ori,
    int narrow,
    int width,
    int height,
    int type,
    int increase,
    ffi.Pointer<ffi.Int8> data,
    int human1,
    int human2,
    int human3,
    int human4,
    int human5,
  ) {
    return _Z_Prn_Barcode(
      x,
      y,
      ori,
      narrow,
      width,
      height,
      type,
      increase,
      data,
      human1,
      human2,
      human3,
      human4,
      human5,
    );
  }

  late final _Z_Prn_BarcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int8,
              ffi.Int8,
              ffi.Int8,
              ffi.Int8,
              ffi.Int8)>>('Z_Prn_Barcode');
  late final _Z_Prn_Barcode = _Z_Prn_BarcodePtr.asFunction<
      int Function(int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Int8>, int, int, int, int, int)>();

  int Z_Prn_Text(
    int x,
    int y,
    int ori,
    int font,
    int height,
    int width,
    int numeric,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _Z_Prn_Text(
      x,
      y,
      ori,
      font,
      height,
      width,
      numeric,
      data,
    );
  }

  late final _Z_Prn_TextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('Z_Prn_Text');
  late final _Z_Prn_Text = _Z_Prn_TextPtr.asFunction<
      int Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int Z_Prn_Text_Chinese(
    int x,
    int y,
    int fonttype,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int mem_mode,
  ) {
    return _Z_Prn_Text_Chinese(
      x,
      y,
      fonttype,
      id_name,
      data,
      mem_mode,
    );
  }

  late final _Z_Prn_Text_ChinesePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Prn_Text_Chinese');
  late final _Z_Prn_Text_Chinese = _Z_Prn_Text_ChinesePtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int Z_Prn_Text_TrueType(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int mem_mode,
  ) {
    return _Z_Prn_Text_TrueType(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      mem_mode,
    );
  }

  late final _Z_Prn_Text_TrueTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Prn_Text_TrueType');
  late final _Z_Prn_Text_TrueType = _Z_Prn_Text_TrueTypePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
          int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int Z_Prn_Text_TrueType_W(
    int x,
    int y,
    int FHeight,
    int FWidth,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int mem_mode,
  ) {
    return _Z_Prn_Text_TrueType_W(
      x,
      y,
      FHeight,
      FWidth,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      mem_mode,
    );
  }

  late final _Z_Prn_Text_TrueType_WPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Prn_Text_TrueType_W');
  late final _Z_Prn_Text_TrueType_W = _Z_Prn_Text_TrueType_WPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Int8>, int, int, int,
          int, int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void Z_Clear_Memory() {
    return _Z_Clear_Memory();
  }

  late final _Z_Clear_MemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Z_Clear_Memory');
  late final _Z_Clear_Memory = _Z_Clear_MemoryPtr.asFunction<void Function()>();

  void Z_Clear_MemoryEx(
    int nMode,
  ) {
    return _Z_Clear_MemoryEx(
      nMode,
    );
  }

  late final _Z_Clear_MemoryExPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'Z_Clear_MemoryEx');
  late final _Z_Clear_MemoryEx =
      _Z_Clear_MemoryExPtr.asFunction<void Function(int)>();

  int Z_Set_Backfeed(
    int nDistance,
  ) {
    return _Z_Set_Backfeed(
      nDistance,
    );
  }

  late final _Z_Set_BackfeedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_Backfeed');
  late final _Z_Set_Backfeed =
      _Z_Set_BackfeedPtr.asFunction<int Function(int)>();

  int Z_Set_Darkness(
    int darkness,
  ) {
    return _Z_Set_Darkness(
      darkness,
    );
  }

  late final _Z_Set_DarknessPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_Darkness');
  late final _Z_Set_Darkness =
      _Z_Set_DarknessPtr.asFunction<int Function(int)>();

  int Z_Set_DebugDialog(
    int nEnable,
  ) {
    return _Z_Set_DebugDialog(
      nEnable,
    );
  }

  late final _Z_Set_DebugDialogPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_DebugDialog');
  late final _Z_Set_DebugDialog =
      _Z_Set_DebugDialogPtr.asFunction<int Function(int)>();

  int Z_Set_Label(
    int Length,
  ) {
    return _Z_Set_Label(
      Length,
    );
  }

  late final _Z_Set_LabelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('Z_Set_Label');
  late final _Z_Set_Label = _Z_Set_LabelPtr.asFunction<int Function(int)>();

  int Z_Set_Mode(
    int mode,
  ) {
    return _Z_Set_Mode(
      mode,
    );
  }

  late final _Z_Set_ModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>('Z_Set_Mode');
  late final _Z_Set_Mode = _Z_Set_ModePtr.asFunction<int Function(int)>();

  int Z_Set_Origin(
    int y,
  ) {
    return _Z_Set_Origin(
      y,
    );
  }

  late final _Z_Set_OriginPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_Origin');
  late final _Z_Set_Origin = _Z_Set_OriginPtr.asFunction<int Function(int)>();

  int Z_Set_Paper(
    int mode,
  ) {
    return _Z_Set_Paper(
      mode,
    );
  }

  late final _Z_Set_PaperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>('Z_Set_Paper');
  late final _Z_Set_Paper = _Z_Set_PaperPtr.asFunction<int Function(int)>();

  int Z_Set_Prncomport(
    int baud,
    int parity,
    int data,
    int stop,
  ) {
    return _Z_Set_Prncomport(
      baud,
      parity,
      data,
      stop,
    );
  }

  late final _Z_Set_PrncomportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>('Z_Set_Prncomport');
  late final _Z_Set_Prncomport =
      _Z_Set_PrncomportPtr.asFunction<int Function(int, int, int, int)>();

  int Z_Set_Prncomport_PC(
    int nBaudRate,
    int nByteSize,
    int nParity,
    int nStopBits,
    int nDsr,
    int nCts,
    int nXonXoff,
  ) {
    return _Z_Set_Prncomport_PC(
      nBaudRate,
      nByteSize,
      nParity,
      nStopBits,
      nDsr,
      nCts,
      nXonXoff,
    );
  }

  late final _Z_Set_Prncomport_PCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('Z_Set_Prncomport_PC');
  late final _Z_Set_Prncomport_PC = _Z_Set_Prncomport_PCPtr.asFunction<
      int Function(int, int, int, int, int, int, int)>();

  void Z_Set_Reset() {
    return _Z_Set_Reset();
  }

  late final _Z_Set_ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Z_Set_Reset');
  late final _Z_Set_Reset = _Z_Set_ResetPtr.asFunction<void Function()>();

  int Z_Set_Speed(
    int print,
  ) {
    return _Z_Set_Speed(
      print,
    );
  }

  late final _Z_Set_SpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('Z_Set_Speed');
  late final _Z_Set_Speed = _Z_Set_SpeedPtr.asFunction<int Function(int)>();

  int Z_Set_TPH(
    int mode,
  ) {
    return _Z_Set_TPH(
      mode,
    );
  }

  late final _Z_Set_TPHPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>('Z_Set_TPH');
  late final _Z_Set_TPH = _Z_Set_TPHPtr.asFunction<int Function(int)>();

  int Z_Set_Unit(
    int Unit,
  ) {
    return _Z_Set_Unit(
      Unit,
    );
  }

  late final _Z_Set_UnitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>('Z_Set_Unit');
  late final _Z_Set_Unit = _Z_Set_UnitPtr.asFunction<int Function(int)>();

  int Z_Set_Gap(
    int nPatern,
    int nGap,
  ) {
    return _Z_Set_Gap(
      nPatern,
      nGap,
    );
  }

  late final _Z_Set_GapPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'Z_Set_Gap');
  late final _Z_Set_Gap = _Z_Set_GapPtr.asFunction<int Function(int, int)>();

  int Z_Set_ProcessDlg(
    int nShow,
  ) {
    return _Z_Set_ProcessDlg(
      nShow,
    );
  }

  late final _Z_Set_ProcessDlgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_ProcessDlg');
  late final _Z_Set_ProcessDlg =
      _Z_Set_ProcessDlgPtr.asFunction<int Function(int)>();

  int Z_Set_ErrorDlg(
    int nShow,
  ) {
    return _Z_Set_ErrorDlg(
      nShow,
    );
  }

  late final _Z_Set_ErrorDlgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_ErrorDlg');
  late final _Z_Set_ErrorDlg =
      _Z_Set_ErrorDlgPtr.asFunction<int Function(int)>();

  int Z_Bar2d_QRCode(
    int x,
    int y,
    int nModel,
    int nMagni,
    int nErr_Cor,
    int nInput,
    ffi.Pointer<ffi.Int8> data,
    int increase,
  ) {
    return _Z_Bar2d_QRCode(
      x,
      y,
      nModel,
      nMagni,
      nErr_Cor,
      nInput,
      data,
      increase,
    );
  }

  late final _Z_Bar2d_QRCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Bar2d_QRCode');
  late final _Z_Bar2d_QRCode = _Z_Bar2d_QRCodePtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Int8>, int)>();

  int Z_Set_PrintWidth(
    int nDotwidth,
  ) {
    return _Z_Set_PrintWidth(
      nDotwidth,
    );
  }

  late final _Z_Set_PrintWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_Set_PrintWidth');
  late final _Z_Set_PrintWidth =
      _Z_Set_PrintWidthPtr.asFunction<int Function(int)>();

  int Z_Print_OutQuality(
    int nTotal,
    int sets,
    int copies,
    int nPause,
  ) {
    return _Z_Print_OutQuality(
      nTotal,
      sets,
      copies,
      nPause,
    );
  }

  late final _Z_Print_OutQualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('Z_Print_OutQuality');
  late final _Z_Print_OutQuality =
      _Z_Print_OutQualityPtr.asFunction<int Function(int, int, int, int)>();

  int Z_GetUSBBufferLen() {
    return _Z_GetUSBBufferLen();
  }

  late final _Z_GetUSBBufferLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('Z_GetUSBBufferLen');
  late final _Z_GetUSBBufferLen =
      _Z_GetUSBBufferLenPtr.asFunction<int Function()>();

  int Z_EnumUSB(
    ffi.Pointer<ffi.Int8> buf,
  ) {
    return _Z_EnumUSB(
      buf,
    );
  }

  late final _Z_EnumUSBPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'Z_EnumUSB');
  late final _Z_EnumUSB =
      _Z_EnumUSBPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int Z_CreateUSBPort(
    int nPort,
  ) {
    return _Z_CreateUSBPort(
      nPort,
    );
  }

  late final _Z_CreateUSBPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_CreateUSBPort');
  late final _Z_CreateUSBPort =
      _Z_CreateUSBPortPtr.asFunction<int Function(int)>();

  int Z_CreatePort(
    int nPortType,
    int nPort,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _Z_CreatePort(
      nPortType,
      nPort,
      filename,
    );
  }

  late final _Z_CreatePortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('Z_CreatePort');
  late final _Z_CreatePort = _Z_CreatePortPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int Z_Set_Mirror(
    int direction,
  ) {
    return _Z_Set_Mirror(
      direction,
    );
  }

  late final _Z_Set_MirrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int8)>>('Z_Set_Mirror');
  late final _Z_Set_Mirror = _Z_Set_MirrorPtr.asFunction<int Function(int)>();

  int Z_Bar2d_RSS(
    int x,
    int y,
    int ori,
    int rtype,
    int mag,
    int height,
    int seg,
    ffi.Pointer<ffi.Int8> data1,
    ffi.Pointer<ffi.Int8> data2,
  ) {
    return _Z_Bar2d_RSS(
      x,
      y,
      ori,
      rtype,
      mag,
      height,
      seg,
      data1,
      data2,
    );
  }

  late final _Z_Bar2d_RSSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int8,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('Z_Bar2d_RSS');
  late final _Z_Bar2d_RSS = _Z_Bar2d_RSSPtr.asFunction<
      int Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int Z_GetNetPrinterBufferLen() {
    return _Z_GetNetPrinterBufferLen();
  }

  late final _Z_GetNetPrinterBufferLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'Z_GetNetPrinterBufferLen');
  late final _Z_GetNetPrinterBufferLen =
      _Z_GetNetPrinterBufferLenPtr.asFunction<int Function()>();

  int Z_EnumNetPrinter(
    ffi.Pointer<ffi.Int8> buf,
  ) {
    return _Z_EnumNetPrinter(
      buf,
    );
  }

  late final _Z_EnumNetPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'Z_EnumNetPrinter');
  late final _Z_EnumNetPrinter =
      _Z_EnumNetPrinterPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int Z_CreateNetPort(
    int nPort,
  ) {
    return _Z_CreateNetPort(
      nPort,
    );
  }

  late final _Z_CreateNetPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'Z_CreateNetPort');
  late final _Z_CreateNetPort =
      _Z_CreateNetPortPtr.asFunction<int Function(int)>();

  int Z_Prn_Text_TrueType_Uni(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int format,
    int mem_mode,
  ) {
    return _Z_Prn_Text_TrueType_Uni(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      format,
      mem_mode,
    );
  }

  late final _Z_Prn_Text_TrueType_UniPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('Z_Prn_Text_TrueType_Uni');
  late final _Z_Prn_Text_TrueType_Uni = _Z_Prn_Text_TrueType_UniPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
          int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  int Z_Prn_Text_TrueType_UniB(
    int x,
    int y,
    int FSize,
    ffi.Pointer<ffi.Int8> FType,
    int Fspin,
    int FWeight,
    int FItalic,
    int FUnline,
    int FStrikeOut,
    ffi.Pointer<ffi.Int8> id_name,
    ffi.Pointer<ffi.Int8> data,
    int format,
    int mem_mode,
  ) {
    return _Z_Prn_Text_TrueType_UniB(
      x,
      y,
      FSize,
      FType,
      Fspin,
      FWeight,
      FItalic,
      FUnline,
      FStrikeOut,
      id_name,
      data,
      format,
      mem_mode,
    );
  }

  late final _Z_Prn_Text_TrueType_UniBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('Z_Prn_Text_TrueType_UniB');
  late final _Z_Prn_Text_TrueType_UniB =
      _Z_Prn_Text_TrueType_UniBPtr.asFunction<
          int Function(int, int, int, ffi.Pointer<ffi.Int8>, int, int, int, int,
              int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  int Z_GetUSBDeviceInfo(
    int nPort,
    ffi.Pointer<ffi.Int8> pDeviceName,
    ffi.Pointer<ffi.Int32> pDeviceNameLen,
    ffi.Pointer<ffi.Int8> pDevicePath,
    ffi.Pointer<ffi.Int32> pDevicePathLen,
  ) {
    return _Z_GetUSBDeviceInfo(
      nPort,
      pDeviceName,
      pDeviceNameLen,
      pDevicePath,
      pDevicePathLen,
    );
  }

  late final _Z_GetUSBDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('Z_GetUSBDeviceInfo');
  late final _Z_GetUSBDeviceInfo = _Z_GetUSBDeviceInfoPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>)>();

  int Z_Set_EncryptionKey(
    ffi.Pointer<ffi.Int8> encryptionKey,
  ) {
    return _Z_Set_EncryptionKey(
      encryptionKey,
    );
  }

  late final _Z_Set_EncryptionKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'Z_Set_EncryptionKey');
  late final _Z_Set_EncryptionKey =
      _Z_Set_EncryptionKeyPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int Z_Check_EncryptionKey(
    ffi.Pointer<ffi.Int8> decodeKey,
    ffi.Pointer<ffi.Int8> encryptionKey,
    int dwTimeoutms,
  ) {
    return _Z_Check_EncryptionKey(
      decodeKey,
      encryptionKey,
      dwTimeoutms,
    );
  }

  late final _Z_Check_EncryptionKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('Z_Check_EncryptionKey');
  late final _Z_Check_EncryptionKey = _Z_Check_EncryptionKeyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void Z_Set_CommTimeout(
    int ReadTotalTimeoutConstant,
    int WriteTotalTimeoutConstant,
  ) {
    return _Z_Set_CommTimeout(
      ReadTotalTimeoutConstant,
      WriteTotalTimeoutConstant,
    );
  }

  late final _Z_Set_CommTimeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'Z_Set_CommTimeout');
  late final _Z_Set_CommTimeout =
      _Z_Set_CommTimeoutPtr.asFunction<void Function(int, int)>();

  void Z_Get_CommTimeout(
    ffi.Pointer<ffi.Int32> ReadTotalTimeoutConstant,
    ffi.Pointer<ffi.Int32> WriteTotalTimeoutConstant,
  ) {
    return _Z_Get_CommTimeout(
      ReadTotalTimeoutConstant,
      WriteTotalTimeoutConstant,
    );
  }

  late final _Z_Get_CommTimeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('Z_Get_CommTimeout');
  late final _Z_Get_CommTimeout = _Z_Get_CommTimeoutPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void Z_Set_LabelForSmartPrint(
    int lablength,
    int gaplength,
  ) {
    return _Z_Set_LabelForSmartPrint(
      lablength,
      gaplength,
    );
  }

  late final _Z_Set_LabelForSmartPrintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'Z_Set_LabelForSmartPrint');
  late final _Z_Set_LabelForSmartPrint =
      _Z_Set_LabelForSmartPrintPtr.asFunction<void Function(int, int)>();
}
